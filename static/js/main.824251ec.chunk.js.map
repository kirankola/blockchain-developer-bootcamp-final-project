{"version":3,"sources":["components/Header.jsx","components/admin/RegisterPatient.jsx","hooks/useRegisterPatient.js","components/admin/RegisterRequester.jsx","hooks/useRegisterRequester.js","components/admin/Admin.jsx","components/patient/CreateMedicalRecord.jsx","hooks/useCreateMedicalRecord.js","components/patient/Patient.jsx","components/requester/Record.jsx","hooks/useBuyMedicalRecord.js","components/requester/Requester.jsx","hooks/useGetMedicalRecords.js","components/Main.jsx","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","contanier","padding","spacing","display","justifyContent","gap","Header","useEthers","activateBrowserWallet","account","deactivate","isConnected","undefined","classes","className","Button","color","variant","onClick","RegisterPatient","chainId","network","networkMapping","patientRecordAddress","networks","address","constants","AddressZero","console","log","patientRecordsInterface","utils","Interface","abi","patientRecordsContract","Contract","useContractFunction","transactionName","registerPatientSend","send","registerPatientState","state","useState","registerPatient","patientAddr","region","ageRange","gender","formatBytes32String","useRegisterPatient","notifications","useNotifications","setGender","setAgeRange","setAddress","setRegion","showRegisterSuccess","setShowRegisterSuccess","handleCloseSnack","useEffect","filter","notification","type","length","isMining","status","Select","value","label","onChange","event","target","MenuItem","map","age","Input","placeholder","size","CircularProgress","Snackbar","open","autoHideDuration","onClose","Alert","severity","RegisterRequester","registerRequesterSend","registerRequesterState","registerRequester","requesterAddr","RequesterType","name","useRegisterRequester","setType","setName","container","gridTemplateColumns","alignItems","Admin","registrations","selectedRegistration","setSelectedRegistration","Box","TabContext","TabList","newValue","Tab","TabPanel","CreateMedicalRecord","createMedicalRecordSend","createMedicalRecordState","createMedicalRecord","IPFShash","memo","price","parseEther","toString","useCreateMedicalRecord","ipfsHash","setIpfsHash","setPrice","medicalRecordType","setMedicalRecordType","showCreateSuccess","setShowCreateSuccess","Patient","Record","record","showBuySuccess","setShowBuySuccess","BuyMedicalRecordSend","BuyMedicalRecordState","BuyMedicalRecord","id","useBuyMedicalRecord","TableRow","sx","border","TableCell","component","scope","recordType","patient","parseFloat","formatUnits","Requester","records","useContractCall","method","args","medicalCounter","useGetMedicalRecords","TableContainer","Paper","Table","minWidth","TableHead","TableBody","Main","tabs","selectedTab","setSelectedTab","App","multicallAddress","config","readOnlyUrls","multicallAddresses","supportedChains","ChainId","Rinkeby","DAppProvider","Container","maxWidth","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.824251ec.chunk.js","sourcesContent":["import {useEthers} from \"@usedapp/core\"\r\nimport {Button,makeStyles} from \"@material-ui/core\"\r\n \r\nconst useStyles=makeStyles((theme)=>({\r\n    contanier:{\r\n        padding:theme.spacing(4),\r\n        display:\"flex\",\r\n        justifyContent:\"flex-end\",\r\n        gap:theme.spacing(1)\r\n    }\r\n}))\r\nexport const Header=()=>{\r\n    const { activateBrowserWallet, account ,deactivate} = useEthers()\r\n    const isConnected=account !== undefined\r\n    const classes=useStyles()\r\n   // console.log(isConnected,chainId)\r\n    return (\r\n        <div className={classes.contanier}>\r\n\r\n        \r\n        <div>\r\n            {isConnected ?\r\n            (<Button color=\"primary\" variant=\"contained\" onClick={deactivate}>disconnect</Button>):\r\n            (<Button color=\"primary\" variant=\"contained\" onClick={activateBrowserWallet}>connect</Button>)\r\n            }\r\n        </div>\r\n        </div>\r\n    )\r\n}","import { useState, useEffect } from \"react\";\r\nimport { useNotifications } from \"@usedapp/core\";\r\n\r\nimport { useRegisterPatient } from \"../../hooks/useRegisterPatient\";\r\nimport {\r\n  Button,\r\n  Input,\r\n  Select,\r\n  MenuItem,\r\n  CircularProgress,\r\n  Snackbar,\r\n} from \"@material-ui/core\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nexport const RegisterPatient = () => {\r\n  const { registerPatient, registerPatientState } = useRegisterPatient();\r\n  const { notifications } = useNotifications();\r\n\r\n  const [gender, setGender] = useState(0);\r\n  const [ageRange, setAgeRange] = useState(\"1-5\");\r\n  const [address, setAddress] = useState();\r\n  const [region, setRegion] = useState();\r\n  const ageRanges = [\r\n    \"1-5\",\r\n    \"6-10\",\r\n    \"11-15\",\r\n    \"16-20\",\r\n    \"21-25\",\r\n    \"26-30\",\r\n    \"31-35\",\r\n    \"36-40\",\r\n    \"41-45\",\r\n    \"46-50\",\r\n    \"51-55\",\r\n    \"56-60\",\r\n    \"61-65\",\r\n    \"66-70\",\r\n    \"71-75\",\r\n    \"76-80\",\r\n    \"81-85\",\r\n    \"86-90\",\r\n    \"91-95\",\r\n    \"96-100\",\r\n    \"Above 100\",\r\n  ];\r\n  const [showRegisterSuccess, setShowRegisterSuccess] = useState(false);\r\n\r\n  const handleCloseSnack = () => {\r\n    showRegisterSuccess && setShowRegisterSuccess(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (\r\n      notifications.filter(\r\n        (notification) =>\r\n          notification.type === \"transactionSucceed\" &&\r\n          notification.transactionName === \"register Patient\"\r\n      ).length > 0\r\n    ) {\r\n      !showRegisterSuccess && setShowRegisterSuccess(true);\r\n    }\r\n  }, [notifications, showRegisterSuccess]);\r\n\r\n  const isMining = registerPatientState.status === \"Mining\";\r\n\r\n  const handleGenderChange = (event) => {\r\n    setGender(event.target.value);\r\n  };\r\n  const handleAgeRangeChange = (event) => {\r\n    setAgeRange(event.target.value);\r\n  };\r\n\r\n  const handleAddressChange = (event) => {\r\n    setAddress(event.target.value);\r\n  };\r\n  const handleRegionChange = (event) => {\r\n    setRegion(event.target.value);\r\n  };\r\n  const submitRegisterPatient = () => {\r\n    return registerPatient(address, region, ageRange, gender);\r\n  };\r\n  return (\r\n    <>\r\n      <Select value={gender} label=\"Gender\" onChange={handleGenderChange}>\r\n        <MenuItem value={0}>Male</MenuItem>\r\n        <MenuItem value={1}>Female</MenuItem>\r\n        <MenuItem value={2}>Other</MenuItem>\r\n      </Select>\r\n      <Select value={ageRange} label=\"Age\" onChange={handleAgeRangeChange}>\r\n        {ageRanges.map((age) => {\r\n          return <MenuItem value={age}>{age}</MenuItem>;\r\n        })}\r\n      </Select>\r\n      <Input placeholder=\"City, State, Country\" onChange={handleRegionChange} />\r\n      <Input\r\n        placeholder=\"Type patient address here...\"\r\n        onChange={handleAddressChange}\r\n      />\r\n      <Button color=\"primary\" size=\"large\" onClick={submitRegisterPatient}>\r\n        {isMining ? <CircularProgress size={26} /> : \"Submit\"}\r\n      </Button>\r\n\r\n      <Snackbar\r\n        open={showRegisterSuccess}\r\n        autoHideDuration={5000}\r\n        onClose={handleCloseSnack}\r\n      >\r\n        <Alert onClose={handleCloseSnack} severity=\"success\">\r\n          {`Successfully registered patient ${address}`}\r\n        </Alert>\r\n      </Snackbar>\r\n    </>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { useContractFunction, useEthers } from \"@usedapp/core\";\r\n\r\nimport { utils, constants } from \"ethers\";\r\nimport { Contract } from \"@ethersproject/contracts\";\r\nimport networkMapping from \"../contracts/networkMapping.json\";\r\nimport { networks, abi } from \"../contracts/PatientRecord.json\";\r\n\r\nexport const useRegisterPatient = () => {\r\n  const { chainId } = useEthers();\r\n  const network = chainId ? networkMapping[chainId] : \"5777\";\r\n  const patientRecordAddress = chainId\r\n    ? networks[network].address\r\n    : constants.AddressZero;\r\n  console.log(patientRecordAddress);\r\n  const patientRecordsInterface = new utils.Interface(abi);\r\n\r\n  const patientRecordsContract = new Contract(\r\n    patientRecordAddress,\r\n    patientRecordsInterface\r\n  );\r\n  /*   function registerPatient(\r\n    address patientAddr,\r\n    string memory region,\r\n    bytes32 ageRange,\r\n    Gender gender\r\n) */\r\n  const { send: registerPatientSend, state: registerPatientState } =\r\n    useContractFunction(patientRecordsContract, \"registerPatient\", {\r\n      transactionName: \"register Patient\",\r\n    });\r\n\r\n  const registerPatient = (patientAddr, region, ageRange, gender) => {\r\n    console.log(\"mmmm\");\r\n    return registerPatientSend(\r\n      patientAddr,\r\n      region,\r\n      utils.formatBytes32String(ageRange),\r\n      gender\r\n    );\r\n  };\r\n\r\n  const [state, setState] = useState(registerPatientState);\r\n  return { registerPatient, registerPatientState };\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport { useNotifications } from \"@usedapp/core\";\r\n\r\nimport { useRegisterRequester } from \"../../hooks/useRegisterRequester\";\r\nimport {\r\n  Button,\r\n  Input,\r\n  Select,\r\n  MenuItem,\r\n  CircularProgress,\r\n  Snackbar,\r\n} from \"@material-ui/core\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nexport const RegisterRequester = () => {\r\n  const { registerRequester, registerRequesterState } = useRegisterRequester();\r\n  const { notifications } = useNotifications();\r\n\r\n  const [type, setType] = useState(0);\r\n  const [name, setName] = useState(\"\");\r\n  const [address, setAddress] = useState();\r\n  const [region, setRegion] = useState();\r\n\r\n  const [showRegisterSuccess, setShowRegisterSuccess] = useState(false);\r\n\r\n  const handleCloseSnack = () => {\r\n    showRegisterSuccess && setShowRegisterSuccess(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (\r\n      notifications.filter(\r\n        (notification) =>\r\n          notification.type === \"transactionSucceed\" &&\r\n          notification.transactionName === \"register Requester\"\r\n      ).length > 0\r\n    ) {\r\n      !showRegisterSuccess && setShowRegisterSuccess(true);\r\n    }\r\n  }, [notifications, showRegisterSuccess]);\r\n\r\n  const isMining = registerRequesterState.status === \"Mining\";\r\n\r\n  const handleTypeChange = (event) => {\r\n    setType(event.target.value);\r\n  };\r\n  const handleNameChange = (event) => {\r\n    setName(event.target.value);\r\n  };\r\n\r\n  const handleAddressChange = (event) => {\r\n    setAddress(event.target.value);\r\n  };\r\n  const handleRegionChange = (event) => {\r\n    setRegion(event.target.value);\r\n  };\r\n  const submitRegisterRequester = () => {\r\n    return registerRequester(address, type, name, region);\r\n  };\r\n  return (\r\n    <>\r\n      <Select value={type} label=\"Requestor Type\" onChange={handleTypeChange}>\r\n        <MenuItem value={0}>Company</MenuItem>\r\n        <MenuItem value={1}>Doctor</MenuItem>\r\n        <MenuItem value={2}>Research Student</MenuItem>\r\n      </Select>\r\n      <Input\r\n        placeholder=\"Enter requestor full name\"\r\n        onChange={handleNameChange}\r\n      />\r\n\r\n      <Input placeholder=\"City, State, Country\" onChange={handleRegionChange} />\r\n      <Input\r\n        placeholder=\"Type requester address here...\"\r\n        onChange={handleAddressChange}\r\n      />\r\n      <Button color=\"primary\" size=\"large\" onClick={submitRegisterRequester}>\r\n        {isMining ? <CircularProgress size={26} /> : \"Submit\"}\r\n      </Button>\r\n\r\n      <Snackbar\r\n        open={showRegisterSuccess}\r\n        autoHideDuration={5000}\r\n        onClose={handleCloseSnack}\r\n      >\r\n        <Alert onClose={handleCloseSnack} severity=\"success\">\r\n          {`Successfully registered requester ${address}`}\r\n        </Alert>\r\n      </Snackbar>\r\n    </>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { useContractFunction, useEthers } from \"@usedapp/core\";\r\n\r\nimport { utils, constants } from \"ethers\";\r\nimport { Contract } from \"@ethersproject/contracts\";\r\nimport networkMapping from \"../contracts/networkMapping.json\";\r\nimport { networks, abi } from \"../contracts/PatientRecord.json\";\r\n\r\nexport const useRegisterRequester = () => {\r\n  const { chainId } = useEthers();\r\n  const network = chainId ? networkMapping[chainId] : \"5777\";\r\n  const patientRecordAddress = chainId\r\n    ? networks[network].address\r\n    : constants.AddressZero;\r\n  console.log(patientRecordAddress);\r\n  const patientRecordsInterface = new utils.Interface(abi);\r\n\r\n  const patientRecordsContract = new Contract(\r\n    patientRecordAddress,\r\n    patientRecordsInterface\r\n  );\r\n \r\n  const { send: registerRequesterSend, state: registerRequesterState } =\r\n    useContractFunction(patientRecordsContract, \"registerRequester\", {\r\n      transactionName: \"register Requester\",\r\n    });\r\n\r\n  const registerRequester = (requesterAddr, RequesterType, name, region) => {\r\n    return registerRequesterSend(\r\n      requesterAddr,\r\n      RequesterType,\r\n      utils.formatBytes32String(name),\r\n      region\r\n    );\r\n  };\r\n\r\n  const [state, setState] = useState(registerRequesterState);\r\n  return { registerRequester, registerRequesterState };\r\n};\r\n","import { Box, Tab } from \"@material-ui/core\";\r\nimport { useState } from \"react\";\r\nimport { TabContext, TabList, TabPanel } from \"@material-ui/lab\";\r\nimport { Typography, makeStyles } from \"@material-ui/core\";\r\nimport { RegisterPatient } from \"./RegisterPatient\";\r\nimport { RegisterRequester } from \"./RegisterRequester\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    display: \"inline-grid\",\r\n    gridTemplateColumns: \"auto auto auto\",\r\n    gap: theme.spacing(1),\r\n    alignItems: \"center\",\r\n  },\r\n}));\r\n\r\nexport const Admin = () => {\r\n  const classes = useStyles();\r\n  const registrations = [\"patient\", \"requester\"];\r\n  const [selectedRegistration, setSelectedRegistration] = useState(\r\n    registrations[0]\r\n  );\r\n  const handleAdminChange = (event, newValue) => {\r\n    setSelectedRegistration(newValue);\r\n  };\r\n  return (\r\n    <Box>\r\n      <TabContext value={selectedRegistration}>\r\n        <TabList onChange={handleAdminChange} aria-label=\"Admin Manager\">\r\n          <Tab\r\n            label={\"Patient Registrations\"}\r\n            value={registrations[0]}\r\n            key={registrations[0]}\r\n          />\r\n\r\n          <Tab\r\n            label={\"Requester Registrations\"}\r\n            value={registrations[1]}\r\n            key={registrations[1]}\r\n          />\r\n        </TabList>\r\n        <TabPanel value={registrations[0]} key={registrations[0]}>\r\n          <div className={classes.container}>\r\n            <RegisterPatient />\r\n          </div>\r\n        </TabPanel>\r\n        <TabPanel value={registrations[1]} key={registrations[1]}>\r\n          <div className={classes.container}>\r\n            <RegisterRequester />\r\n          </div>\r\n        </TabPanel>\r\n      </TabContext>\r\n    </Box>\r\n  );\r\n};\r\n","import { useState, useEffect, memo } from \"react\";\r\nimport { useNotifications } from \"@usedapp/core\";\r\n\r\nimport { useCreateMedicalRecord } from \"../../hooks/useCreateMedicalRecord\";\r\n\r\nimport {\r\n  Button,\r\n  Input,\r\n  Select,\r\n  MenuItem,\r\n  CircularProgress,\r\n  Snackbar,\r\n} from \"@material-ui/core\";\r\n\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nexport const CreateMedicalRecord = () => {\r\n  const { createMedicalRecord, createMedicalRecordState } =\r\n    useCreateMedicalRecord();\r\n  const { notifications } = useNotifications();\r\n\r\n  const [ipfsHash, setIpfsHash] = useState(0);\r\n  const [price, setPrice] = useState(\"0\");\r\n  const [medicalRecordType, setMedicalRecordType] = useState(\"Scan\");\r\n\r\n  const [showCreateSuccess, setShowCreateSuccess] = useState(false);\r\n\r\n  const handleCloseSnack = () => {\r\n    showCreateSuccess && setShowCreateSuccess(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (\r\n      notifications.filter(\r\n        (notification) =>\r\n          notification.type === \"transactionSucceed\" &&\r\n          notification.transactionName === \"create medical record\"\r\n      ).length > 0\r\n    ) {\r\n      !showCreateSuccess && setShowCreateSuccess(true);\r\n    }\r\n  }, [notifications, showCreateSuccess]);\r\n\r\n  const isMining = createMedicalRecordState.status === \"Mining\";\r\n\r\n  const handleMedicalRecordChange = (event) => {\r\n    setMedicalRecordType(event.target.value);\r\n  };\r\n  const handleIPFSHASHChange = (event) => {\r\n    setIpfsHash(event.target.value);\r\n  };\r\n\r\n  const handlePriceChange = (event) => {\r\n    setPrice(event.target.value);\r\n  };\r\n\r\n  const submitCreate = () => {\r\n    return createMedicalRecord(ipfsHash, medicalRecordType, price);\r\n  };\r\n  return (\r\n    <>\r\n      <Select\r\n        value={medicalRecordType}\r\n        label=\"Medical Record Type\"\r\n        onChange={handleMedicalRecordChange}\r\n      >\r\n        <MenuItem value={\"Scan\"}>Scan</MenuItem>\r\n        <MenuItem value={\"Blood Report\"}>Blood Report</MenuItem>\r\n        <MenuItem value={\"Urine Report\"}>Urine Report</MenuItem>\r\n      </Select>\r\n\r\n      <Input placeholder=\"enter IPFSHASH\" onChange={handleIPFSHASHChange} />\r\n      <Input\r\n        placeholder=\"enter your price in ether\"\r\n        onChange={handlePriceChange}\r\n      />\r\n      <Button color=\"primary\" size=\"large\" onClick={submitCreate}>\r\n        {isMining ? <CircularProgress size={26} /> : \"Submit\"}\r\n      </Button>\r\n\r\n      <Snackbar\r\n        open={showCreateSuccess}\r\n        autoHideDuration={5000}\r\n        onClose={handleCloseSnack}\r\n      >\r\n        <Alert onClose={handleCloseSnack} severity=\"success\">\r\n          {`Successfully created  `}\r\n        </Alert>\r\n      </Snackbar>\r\n    </>\r\n  );\r\n};\r\n","import { useState } from \"react\";\r\nimport { useContractFunction, useEthers } from \"@usedapp/core\";\r\n\r\nimport { utils, constants } from \"ethers\";\r\nimport { Contract } from \"@ethersproject/contracts\";\r\nimport networkMapping from \"../contracts/networkMapping.json\";\r\nimport { networks, abi } from \"../contracts/PatientRecord.json\";\r\n\r\nexport const useCreateMedicalRecord = () => {\r\n  const { chainId } = useEthers();\r\n  const network = chainId ? networkMapping[chainId] : \"5777\";\r\n  const patientRecordAddress = chainId\r\n    ? networks[network].address\r\n    : constants.AddressZero;\r\n  console.log(patientRecordAddress);\r\n  const patientRecordsInterface = new utils.Interface(abi);\r\n\r\n  const patientRecordsContract = new Contract(\r\n    patientRecordAddress,\r\n    patientRecordsInterface\r\n  );\r\n\r\n  const { send: createMedicalRecordSend, state: createMedicalRecordState } =\r\n    useContractFunction(patientRecordsContract, \"createMedicalRecord\", {\r\n      transactionName: \"create medical record\",\r\n    });\r\n\r\n  const createMedicalRecord = (IPFShash, memo, price) => {\r\n    console.log(IPFShash, memo, price);\r\n    return createMedicalRecordSend(\r\n      IPFShash,\r\n      memo,\r\n      utils.parseEther(price.toString())\r\n    );\r\n  };\r\n\r\n  const [state, setState] = useState(createMedicalRecordState);\r\n  return { createMedicalRecord, createMedicalRecordState };\r\n};\r\n","import { Box } from \"@material-ui/core\";\r\n\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { CreateMedicalRecord } from \"./CreateMedicalRecord\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    display: \"inline-grid\",\r\n    gridTemplateColumns: \"auto auto auto\",\r\n    gap: theme.spacing(1),\r\n    alignItems: \"center\",\r\n  },\r\n}));\r\n\r\nexport const Patient = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Box>\r\n      <h3>Create Medical Record </h3>\r\n\r\n      <div className={classes.container}>\r\n        <CreateMedicalRecord />\r\n      </div>\r\n    </Box>\r\n  );\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { useNotifications } from \"@usedapp/core\";\r\nimport { makeStyles, CircularProgress, Snackbar } from \"@material-ui/core\";\r\nimport TableCell from \"@mui/material/TableCell\";\r\nimport { formatUnits } from \"@ethersproject/units\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport { useBuyMedicalRecord } from \"../../hooks/useBuyMedicalRecord\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    display: \"inline-grid\",\r\n    gridTemplateColumns: \"auto auto auto\",\r\n    gap: theme.spacing(1),\r\n    alignItems: \"center\",\r\n  },\r\n}));\r\n\r\nexport const Record = ({ record }) => {\r\n  const [showBuySuccess, setShowBuySuccess] = useState(false);\r\n  const classes = useStyles();\r\n  const { notifications } = useNotifications();\r\n  console.log(record.price);\r\n  const { BuyMedicalRecord, BuyMedicalRecordState } = useBuyMedicalRecord();\r\n  const handleBuy = () => {\r\n    console.log(record.price.toString());\r\n    return BuyMedicalRecord(record.id.toString(), record.price.toString());\r\n  };\r\n  const handleCloseSnack = () => {\r\n    showBuySuccess && setShowBuySuccess(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (\r\n      notifications.filter(\r\n        (notification) =>\r\n          notification.type === \"transactionSucceed\" &&\r\n          notification.transactionName === \"buy Record\"\r\n      ).length > 0\r\n    ) {\r\n      !showBuySuccess && setShowBuySuccess(true);\r\n    }\r\n  }, [notifications, showBuySuccess]);\r\n  const isMining = BuyMedicalRecordState.status === \"Mining\";\r\n  return (\r\n    <>\r\n      <TableRow\r\n        key={record.id}\r\n        sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\r\n      >\r\n        <TableCell component=\"th\" scope=\"row\">\r\n          {record.id.toString()}\r\n        </TableCell>\r\n        <TableCell>{record.IPFShash}</TableCell>\r\n        <TableCell>{record.recordType}</TableCell>\r\n        <TableCell>{record.patient}</TableCell>\r\n        <TableCell>\r\n          {parseFloat(formatUnits(record.price.toString(), 18))}\r\n        </TableCell>\r\n        <TableCell>\r\n          <Button color=\"secondary\" onClick={handleBuy}>\r\n            {\" \"}\r\n            {isMining ? <CircularProgress size={26} /> : \"Buy Now\"}\r\n          </Button>{\" \"}\r\n        </TableCell>\r\n      </TableRow>\r\n\r\n      <Snackbar\r\n        open={showBuySuccess}\r\n        autoHideDuration={5000}\r\n        onClose={handleCloseSnack}\r\n      >\r\n        <Alert onClose={handleCloseSnack} severity=\"success\">\r\n          {`Successfully Purchased  `}\r\n        </Alert>\r\n      </Snackbar>\r\n    </>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { useContractFunction, useEthers } from \"@usedapp/core\";\r\n\r\nimport { utils, constants } from \"ethers\";\r\nimport { Contract } from \"@ethersproject/contracts\";\r\nimport networkMapping from \"../contracts/networkMapping.json\";\r\nimport { networks, abi } from \"../contracts/PatientRecord.json\";\r\n\r\nexport const useBuyMedicalRecord = () => {\r\n  const { chainId } = useEthers();\r\n  const network = chainId ? networkMapping[chainId] : \"5777\";\r\n  const patientRecordAddress = chainId\r\n    ? networks[network].address\r\n    : constants.AddressZero;\r\n  console.log(patientRecordAddress);\r\n  const patientRecordsInterface = new utils.Interface(abi);\r\n\r\n  const patientRecordsContract = new Contract(\r\n    patientRecordAddress,\r\n    patientRecordsInterface\r\n  );\r\n\r\n  const { send: BuyMedicalRecordSend, state: BuyMedicalRecordState } =\r\n    useContractFunction(patientRecordsContract, \"BuyMedicalRecord\", {\r\n      transactionName: \"buy Record\",\r\n    });\r\n\r\n  const BuyMedicalRecord = (id, price) => {\r\n    return BuyMedicalRecordSend(id, { value: price });\r\n  };\r\n\r\n  const [state, setState] = useState(BuyMedicalRecordState);\r\n  return { BuyMedicalRecord, BuyMedicalRecordState };\r\n};\r\n","import { useGetMedicalRecords } from \"../../hooks/useGetMedicalRecords\";\r\nimport { Box } from \"@material-ui/core\";\r\nimport { Record } from \"./Record\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport Table from \"@mui/material/Table\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport TableCell from \"@mui/material/TableCell\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport Paper from \"@mui/material/Paper\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    display: \"inline-grid\",\r\n    gridTemplateColumns: \"auto auto auto\",\r\n    gap: theme.spacing(1),\r\n    alignItems: \"center\",\r\n  },\r\n}));\r\n\r\nexport const Requester = () => {\r\n  const classes = useStyles();\r\n  const records = useGetMedicalRecords();\r\n  console.log(records);\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>ID</TableCell>\r\n            <TableCell>IPFSHash</TableCell>\r\n            <TableCell>Record Type</TableCell>\r\n            <TableCell>Patient</TableCell>\r\n            <TableCell>Price</TableCell>\r\n            <TableCell>Action</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {records &&\r\n            records.map((record) => {\r\n              return <Record record={record} />;\r\n            })}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n};\r\n","import { useContractCall, useEthers } from \"@usedapp/core\";\r\n\r\nimport { utils, BigNumber, constants } from \"ethers\";\r\n\r\nimport networkMapping from \"../contracts/networkMapping.json\";\r\nimport { networks, abi } from \"../contracts/PatientRecord.json\";\r\n/**\r\n * Get the staking balance of a certain token by the user in our TokenFarm contract\r\n * @param address - The contract address of the token\r\n */\r\nexport const useGetMedicalRecords = () => {\r\n  const { account, chainId } = useEthers();\r\n  const network = chainId ? networkMapping[chainId] : \"5777\";\r\n  const patientRecordAddress = chainId\r\n    ? networks[network].address\r\n    : constants.AddressZero;\r\n  const patientRecordsInterface = new utils.Interface(abi);\r\n \r\n  const [medicalCounter] =\r\n    useContractCall({\r\n      abi: patientRecordsInterface,\r\n      address: patientRecordAddress,\r\n      method: \"getMedicalRecords\",\r\n      args: [],\r\n    }) ?? [];\r\n  console.log(medicalCounter);\r\n  return medicalCounter;\r\n};\r\n","import { Admin } from \"./admin/Admin\";\r\nimport { Patient } from \"./patient/Patient\";\r\nimport { Requester } from \"./requester/Requester\";\r\n\r\nimport { Box, Tab } from \"@material-ui/core\";\r\nimport { useState } from \"react\";\r\nimport { TabContext, TabList, TabPanel } from \"@material-ui/lab\";\r\nexport const Main = () => {\r\n  const tabs = [\"admin\", \"patient\", \"requester\"];\r\n  const [selectedTab, setSelectedTab] = useState(tabs[0]);\r\n  const handleTapChange = (event, newValue) => {\r\n    setSelectedTab(newValue);\r\n  };\r\n  return (\r\n    <div>\r\n      <Box>\r\n        <TabContext value={selectedTab}>\r\n          <TabList onChange={handleTapChange} aria-label=\"Admin Manager\">\r\n            <Tab label={\"Admin Manager\"} value={tabs[0]} key={tabs[0]} />\r\n\r\n            <Tab label={\"Patient Management\"} value={tabs[1]} key={tabs[1]} />\r\n            <Tab label={\"Requester Management\"} value={tabs[2]} key={tabs[2]} />\r\n          </TabList>\r\n          <TabPanel value={tabs[0]} key={tabs[0]}>\r\n            <Admin />\r\n          </TabPanel>\r\n          <TabPanel value={tabs[1]} key={tabs[1]}>\r\n            <Patient />\r\n          </TabPanel>\r\n          <TabPanel value={tabs[2]} key={tabs[2]}>\r\n            <Requester />\r\n          </TabPanel>\r\n        </TabContext>\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n","import { DAppProvider, ChainId } from \"@usedapp/core\";\nimport { Header } from \"./components/Header\";\nimport { Container } from \"@material-ui/core\";\nimport { Main } from \"./components/Main\";\n\nimport { networks } from \"./contracts/Multicall.json\";\n//import { useEthers } from \"@usedapp/core\";\n//import { utils, constants } from \"ethers\";\nfunction App() {\n  //const { ChainId } = useEthers();\n\n  const multicallAddress = networks[\"5777\"].address;\n \n  const config = {\n    readOnlyUrls: {\n      1337: \"http://localhost:8545\",\n    },\n    multicallAddresses: {\n      1337: multicallAddress,\n    },\n    supportedChains: [1337,ChainId.Rinkeby],\n  };\n\n  console.log(multicallAddress, config);\n  return (\n    <DAppProvider config={config}>\n      <Header />\n      <Container maxWidth=\"md\">\n        <Main />\n      </Container>\n    </DAppProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}